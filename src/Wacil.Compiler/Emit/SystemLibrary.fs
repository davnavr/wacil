/// <summary>Module for generating references to classes in the <c>System.Runtime</c> assembly.</summary>
[<RequireQualifiedAccess>]
module internal Wacil.Compiler.Emit.SystemLibrary

open AsmResolver.DotNet
open AsmResolver.DotNet.Signatures
open AsmResolver.DotNet.Signatures.Types

/// <summary>
/// Represents a reference to the <see cref="T:System.Object"/> class, which serves as the base type for all classes.
/// </summary>
[<RequireQualifiedAccess; NoComparison; NoEquality>]
type ObjectClass =
    { Type: ITypeDefOrRef
      Constructor: IMethodDefOrRef }

/// <summary>
/// Represents a reference to the <see cref="T:System.MulticastDelegate"/> class, which serves as the base type for
/// <see langword="delegate"/> types generated by most .NET compilers.
/// </summary>
[<RequireQualifiedAccess; NoComparison; NoEquality>]
type MulticastDelegateClass =
    { Type: ITypeDefOrRef
      Signature: TypeDefOrRefSignature }

[<NoComparison; NoEquality>]
type DelegateClass =
    { Type: ITypeDefOrRef
      Signature: TypeDefOrRefSignature
      GetTarget: IMethodDefOrRef
      GetMethod: IMethodDefOrRef
      CreateDelegate: IMethodDefOrRef }

/// <summary>Represents a reference to the <see cref="T:System.Type"/> class.</summary>
[<NoComparison; NoEquality>]
type TypeClass =
    { Type: ITypeDefOrRef
      GetTypeFromHandle: IMethodDefOrRef }

[<NoComparison; NoEquality>]
type RuntimeHelpersClass =
    { InitalizeArray: IMethodDefOrRef }

[<NoComparison; NoEquality>]
type References =
    { /// <summary>
      /// Represents a reference to the <see cref="T:System.ValueType"/> class, which serves as the base type for all value types.
      /// </summary>
      ValueType: ITypeDefOrRef
      Object: ObjectClass
      Delegate: DelegateClass
      MulticastDelegate: MulticastDelegateClass
      Type: TypeClass
      /// <summary>
      /// References the <see cref="T:System.ArgumentException"/> constructor that takes a <see langword="string"/> message and
      /// paramter name.
      /// </summary>
      ArgumentExceptionConstructor: IMethodDefOrRef
      ArgumentNullExceptionConstructor: IMethodDefOrRef
      RuntimeHelpers: RuntimeHelpersClass
      TargetFrameworkAttributeConstructor: ICustomAttributeType
      CompilerGeneratedAttributeConstructor: ICustomAttributeType }

let importTypes (assembly: AssemblyReference) (mdle: ModuleDefinition) =
    let importCoreType = ImportHelpers.importType mdle.DefaultImporter assembly
    let importSystemType = importCoreType "System"
    let importCompilerServicesType = importCoreType "System.Runtime.CompilerServices"

    let tyObject = importSystemType "Object"
    let tyDelegate = importSystemType "Delegate"
    let tyMulticastDelegate = importSystemType "MulticastDelegate"
    let tyType = importSystemType "Type"
    let tyRuntimeHelpers = importCompilerServicesType "RuntimeHelpers"

    let sigDelegate = TypeDefOrRefSignature tyDelegate
    let sigMethodInfo = TypeDefOrRefSignature(importCoreType "System.Reflection" "MethodInfo")
    let sigMulticastDelegate = TypeDefOrRefSignature tyMulticastDelegate
    let sigType = TypeDefOrRefSignature tyType

    { ValueType = importSystemType "ValueType"
      Object =
        { ObjectClass.Type = tyObject
          ObjectClass.Constructor = ImportHelpers.importConstructor mdle Seq.empty tyObject }
      ArgumentExceptionConstructor =
        importSystemType "ArgumentException"
        |> ImportHelpers.importConstructor mdle [| mdle.CorLibTypeFactory.String; mdle.CorLibTypeFactory.String |]
      ArgumentNullExceptionConstructor =
        ImportHelpers.importConstructor mdle [| mdle.CorLibTypeFactory.String |] (importSystemType "ArgumentNullException")
      Delegate =
        { Type = tyDelegate
          Signature = sigDelegate
          GetTarget =
            ImportHelpers.importPropertyAccessor
                mdle.DefaultImporter
                CallingConventionAttributes.HasThis
                mdle.CorLibTypeFactory.Object
                "get_Target"
                tyDelegate
          GetMethod =
            ImportHelpers.importPropertyAccessor
                mdle.DefaultImporter
                CallingConventionAttributes.HasThis
                sigMethodInfo
                "get_Method"
                tyDelegate
          CreateDelegate =
            ImportHelpers.importMethod
                mdle.DefaultImporter
                CallingConventionAttributes.Default
                sigDelegate
                [|
                    sigDelegate
                    mdle.CorLibTypeFactory.Object
                    sigMethodInfo
                |]
                "CreateDelegate"
                tyDelegate }
      MulticastDelegate =
        { MulticastDelegateClass.Type = tyMulticastDelegate
          MulticastDelegateClass.Signature = sigMulticastDelegate }
      Type =
        { Type = tyType
          GetTypeFromHandle =
            ImportHelpers.importMethod
                mdle.DefaultImporter
                CallingConventionAttributes.Default
                sigType
                [| TypeDefOrRefSignature(importSystemType "RuntimeTypeHandle") |]
                "GetTypeFromHandle"
                tyType
          }
      RuntimeHelpers =
        { InitalizeArray =
            ImportHelpers.importMethod
                mdle.DefaultImporter
                CallingConventionAttributes.Default
                mdle.CorLibTypeFactory.Void
                [|
                    TypeDefOrRefSignature(importSystemType "Array")
                    TypeDefOrRefSignature(importSystemType "RuntimeFieldHandle")
                |]
                "InitializeArray"
                tyRuntimeHelpers }
      TargetFrameworkAttributeConstructor =
        importCoreType "System.Runtime.Versioning" "TargetFrameworkAttribute"
        |> ImportHelpers.importConstructor mdle [| mdle.CorLibTypeFactory.String |]
        :?> ICustomAttributeType
      CompilerGeneratedAttributeConstructor =
        importCompilerServicesType "CompilerGeneratedAttribute"
        |> ImportHelpers.importConstructor mdle Seq.empty
        :?> ICustomAttributeType }
