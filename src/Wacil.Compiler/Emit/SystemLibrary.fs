/// <summary>Module for generating references to classes in the <c>System.Runtime</c> assembly.</summary>
[<RequireQualifiedAccess>]
module internal Wacil.Compiler.Emit.SystemLibrary

open AsmResolver.DotNet
open AsmResolver.DotNet.Signatures
open AsmResolver.DotNet.Signatures.Types

/// <summary>
/// Represents a reference to the <see cref="T:System.Object"/> class, which serves as the base type for all classes.
/// </summary>
[<RequireQualifiedAccess; NoComparison; NoEquality>]
type ObjectClass =
    { Type: ITypeDefOrRef
      Constructor: IMethodDefOrRef }

/// <summary>
/// Represents a reference to the <see cref="T:System.MulticastDelegate"/> class, which serves as the base type for
/// <see langword="delegate"/> types generated by most .NET compilers.
/// </summary>
[<RequireQualifiedAccess; NoComparison; NoEquality>]
type MulticastDelegateClass =
    { Type: ITypeDefOrRef
      Signature: TypeDefOrRefSignature }

[<NoComparison; NoEquality>]
type DelegateClass =
    { Type: ITypeDefOrRef
      Signature: TypeDefOrRefSignature
      GetTarget: IMethodDefOrRef
      GetMethod: IMethodDefOrRef
      CreateDelegate: IMethodDefOrRef }

/// <summary>Represents a reference to the <see cref="T:System.Type"/> class.</summary>
[<NoComparison; NoEquality>]
type TypeClass =
    { Type: ITypeDefOrRef
      GetTypeFromHandle: IMethodDefOrRef }

[<NoComparison; NoEquality>]
type RuntimeHelpersClass =
    { InitalizeArray: IMethodDefOrRef }

[<NoComparison; NoEquality>]
type BitConverterClass =
    { Int32BitsToSingle: IMethodDefOrRef
      SingleToInt32Bits: IMethodDefOrRef
      Int64BitsToDouble: IMethodDefOrRef
      DoubleToInt64Bits: IMethodDefOrRef }

[<NoComparison; NoEquality>]
type BitOperationsClass =
    { LeadingZeroCountUInt32: IMethodDefOrRef
      TrailingZeroCountUInt32: IMethodDefOrRef }

[<NoComparison; NoEquality>]
type DebuggableAttributeClass =
    { Constructor: ICustomAttributeType
      ModesEnum: TypeSignature }

[<RequireQualifiedAccess; NoComparison; NoEquality>]
type MathMethods =
    { SingleAbs: IMethodDefOrRef
      DoubleAbs: IMethodDefOrRef
      SingleCeiling: IMethodDefOrRef
      DoubleCeiling: IMethodDefOrRef
      SingleFloor: IMethodDefOrRef
      DoubleFloor: IMethodDefOrRef
      SingleTruncate: IMethodDefOrRef
      DoubleTruncate: IMethodDefOrRef
      SingleSqrt: IMethodDefOrRef
      DoubleSqrt: IMethodDefOrRef
      SingleMin: IMethodDefOrRef
      DoubleMin: IMethodDefOrRef
      SingleMax: IMethodDefOrRef
      DoubleMax: IMethodDefOrRef
      SingleCopySign: IMethodDefOrRef
      DoubleCopySign: IMethodDefOrRef }

[<NoComparison; NoEquality>]
type References =
    { /// <summary>
      /// Represents a reference to the <see cref="T:System.ValueType"/> class, which serves as the base type for all value types.
      /// </summary>
      ValueType: ITypeDefOrRef
      Object: ObjectClass
      Delegate: DelegateClass
      MulticastDelegate: MulticastDelegateClass
      Type: TypeClass
      /// <summary>
      /// References the <see cref="T:System.ArgumentException"/> constructor that takes a <see langword="string"/> message and
      /// paramter name.
      /// </summary>
      ArgumentExceptionConstructor: IMethodDefOrRef
      ArgumentNullExceptionConstructor: IMethodDefOrRef
      RuntimeHelpers: RuntimeHelpersClass
      BitConverter: BitConverterClass
      BitOperations: BitOperationsClass
      DebuggableAttribute: DebuggableAttributeClass
      TargetFrameworkAttributeConstructor: ICustomAttributeType
      CompilerGeneratedAttributeConstructor: ICustomAttributeType
      Math: MathMethods }

let importTypes (assembly: AssemblyReference) (mdle: ModuleDefinition) =
    let importCoreType = ImportHelpers.importType mdle.DefaultImporter assembly
    let importSystemType = importCoreType "System"
    let importCompilerServicesType = importCoreType "System.Runtime.CompilerServices"

    let tyObject = importSystemType "Object"
    let tyDelegate = importSystemType "Delegate"
    let tyMulticastDelegate = importSystemType "MulticastDelegate"
    let tyType = importSystemType "Type"
    let tyRuntimeHelpers = importCompilerServicesType "RuntimeHelpers"
    let tyBitOperations = importCoreType "System.Numerics" "BitOperations"

    let sigDelegate = TypeDefOrRefSignature tyDelegate
    let sigMethodInfo = TypeDefOrRefSignature(importCoreType "System.Reflection" "MethodInfo")
    let sigMulticastDelegate = TypeDefOrRefSignature tyMulticastDelegate
    let sigType = TypeDefOrRefSignature tyType

    { ValueType = importSystemType "ValueType"
      Object =
        { ObjectClass.Type = tyObject
          ObjectClass.Constructor = ImportHelpers.importConstructor mdle Seq.empty tyObject }
      ArgumentExceptionConstructor =
        importSystemType "ArgumentException"
        |> ImportHelpers.importConstructor mdle [| mdle.CorLibTypeFactory.String; mdle.CorLibTypeFactory.String |]
      ArgumentNullExceptionConstructor =
        ImportHelpers.importConstructor mdle [| mdle.CorLibTypeFactory.String |] (importSystemType "ArgumentNullException")
      Delegate =
        { Type = tyDelegate
          Signature = sigDelegate
          GetTarget =
            ImportHelpers.importPropertyAccessor
                mdle.DefaultImporter
                CallingConventionAttributes.HasThis
                mdle.CorLibTypeFactory.Object
                "get_Target"
                tyDelegate
          GetMethod =
            ImportHelpers.importPropertyAccessor
                mdle.DefaultImporter
                CallingConventionAttributes.HasThis
                sigMethodInfo
                "get_Method"
                tyDelegate
          CreateDelegate =
            ImportHelpers.importMethod
                mdle.DefaultImporter
                CallingConventionAttributes.Default
                sigDelegate
                [|
                    sigDelegate
                    mdle.CorLibTypeFactory.Object
                    sigMethodInfo
                |]
                "CreateDelegate"
                tyDelegate }
      MulticastDelegate =
        { MulticastDelegateClass.Type = tyMulticastDelegate
          MulticastDelegateClass.Signature = sigMulticastDelegate }
      Type =
        { Type = tyType
          GetTypeFromHandle =
            ImportHelpers.importMethod
                mdle.DefaultImporter
                CallingConventionAttributes.Default
                sigType
                [| TypeDefOrRefSignature(importSystemType "RuntimeTypeHandle") |]
                "GetTypeFromHandle"
                tyType
          }
      BitConverter =
        let tyBitConverter = importSystemType "BitConverter"
        let bitConverterHelper returnType parameterTypes name =
            ImportHelpers.importMethod
                mdle.DefaultImporter
                CallingConventionAttributes.Default
                returnType
                parameterTypes
                name
                tyBitConverter
        { Int32BitsToSingle = bitConverterHelper mdle.CorLibTypeFactory.Single [| mdle.CorLibTypeFactory.Int32 |] "Int32BitsToSingle"
          SingleToInt32Bits = bitConverterHelper mdle.CorLibTypeFactory.Int32 [| mdle.CorLibTypeFactory.Single |] "SingleToInt32Bits"
          Int64BitsToDouble = bitConverterHelper mdle.CorLibTypeFactory.Double [| mdle.CorLibTypeFactory.Int64 |] "Int64BitsToDouble"
          DoubleToInt64Bits = bitConverterHelper mdle.CorLibTypeFactory.Int64 [| mdle.CorLibTypeFactory.Double |] "DoubleToInt64Bits" }
      BitOperations =
        let bitOperationHelper returnType parameterTypes name =
            ImportHelpers.importMethod
                mdle.DefaultImporter
                CallingConventionAttributes.Default
                returnType
                parameterTypes
                name
                tyBitOperations

        let bitCountOperation returnType argumentType name =
            bitOperationHelper returnType [| argumentType |] name

        { LeadingZeroCountUInt32 =
            bitCountOperation mdle.CorLibTypeFactory.Int32 mdle.CorLibTypeFactory.UInt32 "LeadingZeroCount"
          TrailingZeroCountUInt32 =
            bitCountOperation mdle.CorLibTypeFactory.Int32 mdle.CorLibTypeFactory.UInt32 "TrailingZeroCount" }
      RuntimeHelpers =
        { InitalizeArray =
            ImportHelpers.importMethod
                mdle.DefaultImporter
                CallingConventionAttributes.Default
                mdle.CorLibTypeFactory.Void
                [|
                    TypeDefOrRefSignature(importSystemType "Array")
                    TypeDefOrRefSignature(importSystemType "RuntimeFieldHandle")
                |]
                "InitializeArray"
                tyRuntimeHelpers }
      DebuggableAttribute =
        let tyDebuggableAttribute = importCoreType "System.Diagnostics" "DebuggableAttribute"
        let sigDebuggingModes =
            tyDebuggableAttribute.CreateTypeReference("DebuggingModes")
            |> mdle.DefaultImporter.ImportTypeOrNull
            |> TypeDefOrRefSignature

        { Constructor = ImportHelpers.importConstructor mdle [| sigDebuggingModes |] tyDebuggableAttribute :?> ICustomAttributeType
          ModesEnum = sigDebuggingModes }
      TargetFrameworkAttributeConstructor =
        importCoreType "System.Runtime.Versioning" "TargetFrameworkAttribute"
        |> ImportHelpers.importConstructor mdle [| mdle.CorLibTypeFactory.String |]
        :?> ICustomAttributeType
      CompilerGeneratedAttributeConstructor =
        importCompilerServicesType "CompilerGeneratedAttribute"
        |> ImportHelpers.importConstructor mdle Seq.empty
        :?> ICustomAttributeType
      Math =
        let tySingle = mdle.CorLibTypeFactory.Single
        let tySingle1 = [| tySingle |]
        let tySingle2 = [| tySingle; tySingle |]

        let tyDouble = mdle.CorLibTypeFactory.Double
        let tyDouble1 = [| tyDouble |]
        let tyDouble2 = [| tyDouble; tyDouble |]

        let tyMath = importSystemType "Math"
        let tyMathF = importSystemType "MathF"

        let importMathFunction returnType (parameterTypes: CorLibTypeSignature[]) =
            Seq.map (fun ty -> ty :> TypeSignature) parameterTypes
            |> ImportHelpers.importMethod mdle.DefaultImporter CallingConventionAttributes.Default returnType

        { SingleAbs = importMathFunction tySingle tySingle1 "Abs" tyMathF
          DoubleAbs = importMathFunction tyDouble tyDouble1 "Abs" tyMath
          SingleCeiling = importMathFunction tySingle tySingle1 "Ceiling" tyMathF
          DoubleCeiling = importMathFunction tyDouble tyDouble1 "Ceiling" tyMath
          SingleFloor = importMathFunction tySingle tySingle1 "Floor" tyMathF
          DoubleFloor = importMathFunction tyDouble tyDouble1 "Floor" tyMath
          SingleTruncate = importMathFunction tySingle tySingle1 "Truncate" tyMathF
          DoubleTruncate = importMathFunction tyDouble tyDouble1 "Truncate" tyMath
          SingleSqrt = importMathFunction tySingle tySingle1 "Sqrt" tyMathF
          DoubleSqrt = importMathFunction tyDouble tyDouble1 "Sqrt" tyMath
          SingleMin = importMathFunction tySingle tySingle2 "Min" tyMathF
          DoubleMin = importMathFunction tyDouble tyDouble2 "Min" tyMath
          SingleMax = importMathFunction tySingle tySingle2 "Max" tyMathF
          DoubleMax = importMathFunction tyDouble tyDouble2 "Max" tyMath
          SingleCopySign = importMathFunction tySingle tySingle2 "CopySign" tyMathF
          DoubleCopySign = importMathFunction tyDouble tyDouble2 "CopySign" tyMath } }
