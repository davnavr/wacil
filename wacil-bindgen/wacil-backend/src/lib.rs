//! Used to generate C# wrapper code for a Rust WebAssembly module translated to a .NET assembly by `wacil`.

use std::io::Write;
use wacil_bindgen::interface;

type Result = std::io::Result<()>;

struct Destination<W: Write> {
    out: W,
    is_new_line: bool,
}

impl<W: Write> Destination<W> {
    fn new(destination: W) -> Self {
        Self {
            out: destination,
            is_new_line: true,
        }
    }

    fn require_new_line(&mut self) -> Result {
        if !self.is_new_line {
            writeln!(self.out)?;
            self.is_new_line = true;
        }

        Ok(())
    }

    fn write_fmt(&mut self, args: core::fmt::Arguments<'_>) -> Result {
        self.is_new_line = false;
        self.out.write_fmt(args)
    }

    fn write(&mut self, s: &str) -> Result {
        if !s.is_empty() {
            self.is_new_line = false;
            self.out.write_all(s.as_bytes())?;
        }
        Ok(())
    }

    fn write_display(&mut self, d: impl std::fmt::Display) -> Result {
        self.write_fmt(format_args!("{d}"))
    }

    fn write_comment(&mut self, contents: &str) -> Result {
        self.require_new_line()?;
        self.write("// ")?;
        self.write(contents)
    }

    fn write_region<F: FnOnce(&mut Self) -> Result>(&mut self, name: &str, contents: F) -> Result {
        self.require_new_line()?;
        self.write("#region ")?;
        self.write(name)?;
        self.require_new_line()?;
        contents(self)?;
        self.require_new_line()?;
        self.write("#endregion")
    }

    fn write_namespace<F: FnOnce(&mut Self) -> Result>(&mut self, namespace: interface::Namespace, contents: F) -> Result {
        if !namespace.names().is_empty() {
            self.require_new_line()?;
            self.write("namespace ")?;
            self.write_fmt(format_args!("{namespace}"))?;
            self.write(" {")?;
            self.require_new_line()?;
            contents(self)?;
            self.require_new_line()?;
            self.write("}")
        } else {
            contents(self)
        }
    }

    fn write_class<F: FnOnce(&mut Self) -> Result>(&mut self, name: interface::Name, modifiers: &[&'static str], contents: F) -> Result {
        self.require_new_line()?;
        modifiers.iter().try_for_each(|word| self.write_fmt(format_args!("{word} ")))?;
        self.write_fmt(format_args!("class {name} {{"))?;
        self.require_new_line()?;
        contents(self)?;
        self.require_new_line()?;
        self.write("}")
    }
}

pub struct Module {
    pub interfaces: &'static [&'static interface::Interface],
    pub module_name: interface::TypeName,
    pub wrapper_name: interface::TypeName,
}

pub fn generate<W: Write>(module: &Module, destination: W) -> Result {
    let mut out = Destination::new(destination);
    out.write_comment("<auto-generated>Generated by wacil</auto-generated>")?;
    out.write_namespace(module.wrapper_name.namespace, |out| {
        out.write_class(module.wrapper_name.name, &["public", "sealed"], |out| {
            Ok(())
        })
    })?;
    out.require_new_line()
}
