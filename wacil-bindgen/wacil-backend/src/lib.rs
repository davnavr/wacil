//! Used to generate C# wrapper code for a Rust WebAssembly module translated to a .NET assembly by `wacil`.

mod syntax;

use std::io::Write;
use wacil_bindgen::interface;

pub struct Module {
    pub interfaces: &'static [&'static interface::Interface],
    pub module_name: interface::TypeName,
    pub wrapper_name: interface::TypeName,
}

pub fn generate<W: Write>(module: &Module, mut destination: W) -> std::io::Result<()> {
    use syntax::*;

    let module_type = Type::Named {
        name: module.module_name,
        arguments: &[],
    };

    let members = vec![
        Member::Field(Field {
            access: AccessModifier::Private,
            modifiers: &[],
            name: "locker",
            value_type: &Type::Object,
            value: Some(&Expression::NewInstance(&Type::Object, &[])),
        }),
        Member::Field(Field {
            access: AccessModifier::Private,
            modifiers: &[FieldModifier::Readonly],
            name: "module",
            value_type: &module_type,
            value: None,
        }),
    ];

    let tree = SourceCode {
        namespace: module.wrapper_name.namespace,
        type_definitions: &[TypeDefinition {
            access: AccessModifier::Public,
            kind: TypeDefinitionKind::Class,
            name: module.wrapper_name.name,
            sub_types: &[],
            members: &members,
        }],
    };

    writeln!(destination, "// <auto-generated>Generated by wacil</auto-generated>")?;
    write!(destination, "{tree}")?;
    writeln!(destination)
}
